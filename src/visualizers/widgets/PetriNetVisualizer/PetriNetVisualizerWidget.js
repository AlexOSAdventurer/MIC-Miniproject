/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Dec 04 2022 23:21:32 GMT+0000 (Coordinated Universal Time).
 */

require.config({
    paths: {
        'lodash': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min'
    }
})


define(['css!./styles/PetriNetVisualizerWidget.css', 'css!https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.6.2/joint.css', 'https://cdnjs.cloudflare.com/ajax/libs/jointjs/3.6.2/joint.js', 'js/RegistryKeys'], function (css1, css2, joint, REGISTRY_KEYS) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-visualizer';

    function PetriNetVisualizerWidget(logger, container, client) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this._client = client;

        this.nodes = {};
        this.places = {};
        this.transitions = {};
        this.unsatisfiedlinks = [];
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetVisualizerWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
        var namespace = joint.shapes;
        this._graph = new joint.dia.Graph({}, { cellNamespace: namespace });
        this._paper = new joint.dia.Paper({
            el: this._el,
            model: this._graph,
            width: 600,
            height: 100,
            gridSize: 1,
            cellViewNamespace: namespace,
            interactive: false
        });
        this._paper.on('element:pointerdblclick', function(elementView) {
            var currentElement = elementView.model;
            var path = currentElement.prop('petrinet/path');
            var type = currentElement.prop('petrinet/type');
            if (type == "Transition") {
                self.doTransition(path);
            }
        });
        this._status_el = document.createElement("div");
        this._status_el_deadlock = document.createElement("h5");
        this._status_el_nettype = document.createElement("h5");
        this._status_el.append(this._status_el_deadlock);
        this._status_el.append(this._status_el_nettype);
        this._status_el_nettype.innerHTML = "Net Type: Run the above button to find out!";
        this._status_el_deadlock.innerHTML = "Dead lock state: ....";
        this._el.append(this._status_el);
    };

    PetriNetVisualizerWidget.prototype.doTransition = function (path) {
        if (this.isTransitionEnabled(path)) { 
            var nodeInfo = this.transitions[path];
            var inplaces = this.getInPlaces(path);
            var outplaces = this.getOutPlaces(path);
            for (const inplace of inplaces) {
                this.places[inplace]['marking'] = this.places[inplace]['marking'] - 1
            }
            for (const outplace of outplaces) {
                this.places[outplace]['marking'] = this.places[outplace]['marking'] + 1
            }
            this.updateAllPlaceDisplays();
            this.updateAllTransitionDisplays();
        }
    }

    PetriNetVisualizerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    PetriNetVisualizerWidget.prototype.getNodeInfo = function (id) {
        var nodeObj = this._client.getNode(id);
        var res = {};
        var baseId = nodeObj.getBaseId();
        if (baseId) {
            var baseNode = this._client.getNode(baseId);
            res['type'] = baseNode.getAttribute('name');
        }
        else {
            res['type'] = null;
        }
        res['baseId'] = baseId;
        res['path'] = id;
        res['nodeObj'] = nodeObj;
        var pos = nodeObj.getRegistry(REGISTRY_KEYS.POSITION);
        if (!pos) {
            pos = {};
            pos.x = null;
            pos.y = null;
        }
        res['pos'] = pos;
        for (const attribute of nodeObj.getAttributeNames()) {
            res[attribute] = nodeObj.getAttribute(attribute);
        }
        for (const pointer of nodeObj.getPointerNames(nodeObj)) {
            var pointerPath = nodeObj.getPointerId(pointer);
            res[pointer] = pointerPath;
          }
        return res;
    }

    // Adding/Removing/Updating items
    PetriNetVisualizerWidget.prototype.addNode = function (desc) {
        if (desc && (this._client.getNode(desc.id) != null)) {
            var nodeInfo = this.getNodeInfo(desc.id);
            var pos = nodeInfo['pos'];
            this.nodes[desc.id] = desc;
            if (nodeInfo['type'] == "Place") {
                var guiObj = new joint.shapes.standard.Circle();
                guiObj.position(pos.x, pos.y);
                guiObj.resize(75, 75);
                guiObj.prop('petrinet/path', nodeInfo['path']);
                guiObj.prop('petrinet/type', nodeInfo['type']);
                guiObj.addTo(this._graph);
                nodeInfo['guiObj'] = guiObj;
                nodeInfo['transitions'] = {};
                this.places[nodeInfo['path']] = nodeInfo;
            }
            else if (nodeInfo['type'] == "Transition") {
                var guiObj = new joint.shapes.standard.Rectangle();
                guiObj.position(pos.x, pos.y);
                guiObj.resize(75, 75);
                guiObj.prop('petrinet/path', nodeInfo['path']);
                guiObj.prop('petrinet/type', nodeInfo['type']);
                guiObj.addTo(this._graph);
                nodeInfo['guiObj'] = guiObj;
                nodeInfo['places'] = {};
                this.transitions[nodeInfo['path']] = nodeInfo;
            }
            else if ((nodeInfo['type'] == "ArcToTransition") || (nodeInfo['type'] == "ArcToPlace")){
                this.unsatisfiedlinks.push(nodeInfo);
            }
            this.linkSatisfiables();
        }
        this.updateAllPlaceDisplays();
        this.updateAllTransitionDisplays();
    }

    PetriNetVisualizerWidget.prototype.getInPlaces = function (path) {
        var opt = {};
        opt.deep = false;
        opt.inbound = true;
        opt.outbound = false;
        opt.indirect = false;
        var inplaces = this._graph.getNeighbors(this.transitions[path]['guiObj'], opt);
        var res = [];
        for (const inplace of inplaces) {
            res.push(inplace.prop('petrinet/path'));
        }
        return res;
    }

    PetriNetVisualizerWidget.prototype.getOutPlaces = function (path) {
        var opt = {};
        opt.deep = false;
        opt.inbound = false;
        opt.outbound = true;
        opt.indirect = false;
        var outplaces = this._graph.getNeighbors(this.transitions[path]['guiObj'], opt);
        var res = [];
        for (const outplace of outplaces) {
            res.push(outplace.prop('petrinet/path'));
        }
        return res;
    }

    PetriNetVisualizerWidget.prototype.getInTransitions = function (path) {
        var opt = {};
        opt.deep = false;
        opt.inbound = true;
        opt.outbound = false;
        opt.indirect = false;
        var intransitions = this._graph.getNeighbors(this.places[path]['guiObj'], opt);
        var res = [];
        for (const intransition of intransitions) {
            res.push(intransition.prop('petrinet/path'));
        }
        return res;
    }

    PetriNetVisualizerWidget.prototype.getOutTransitions = function (path) {
        var opt = {};
        opt.deep = false;
        opt.inbound = false;
        opt.outbound = true;
        opt.indirect = false;
        var outtransitions = this._graph.getNeighbors(this.places[path]['guiObj'], opt);
        var res = [];
        for (const outtransition of outtransitions) {
            res.push(outtransition.prop('petrinet/path'));
        }
        return res;
    }

    PetriNetVisualizerWidget.prototype.isTransitionEnabled = function (path) {
        var opt = {};
        opt.deep = false;
        opt.inbound = true;
        opt.outbound = false;
        opt.indirect = false;
        var inplaces = this.getInPlaces(path);
        for (const inplace of inplaces) {
            var inplace_data = this.places[inplace];
            if (inplace_data['marking'] < 1) {
                return false;
            }
        }
        return true;
    }

    PetriNetVisualizerWidget.prototype.freeChoiceNet = function () {
        function setIntersection(a, b) {
            var bS = new Set(b);
            return a.filter(item => bS.has(item));
        }

        for (var transition1 in this.transitions) {
            var transition1InPlaces = this.getInPlaces(transition1);
            for (var transition2 in this.transitions) { 
                var tranition2InPlaces = this.getInPlaces(transition2);
                var intersect = setIntersection(transition1InPlaces, tranition2InPlaces);
                if ((intersect.length > 0) && (transition1 != transition2)) {
                    return false;
                }
            }
        }
        return true;
    }

    PetriNetVisualizerWidget.prototype.stateMachineNet = function () {
        for (var transition in this.transitions) { 
            if ((this.getInPlaces(transition).length != 1) || (this.getOutPlaces(transition).length != 1)) {
                return false;
            }
        }
        return true;
    }

    PetriNetVisualizerWidget.prototype.markedGraphNet = function () {
        for (var place in this.places) { 
            if ((this.getInTransitions(place).length != 1) || (this.getOutTransitions(place).length != 1)) {
                return false;
            }
        }
        return true;
    }

    PetriNetVisualizerWidget.prototype.workFlowNet = function () {
        var sources = this._graph.getSources();
        var sinks = this._graph.getSinks();

        return (sources.length == 1) && (sinks.length == 1) && (sources[0].prop('petrinet/type') == "Place") && (sinks[0].prop('petrinet/type') == "Place");
    }

    PetriNetVisualizerWidget.prototype.updateNetTypeDisplay = function () {
        var names = ["Free Choice", "State Machine", "Marked Graph", "Work Flow"];
        var functionArbitrators = ["freeChoiceNet", "stateMachineNet", "markedGraphNet", "workFlowNet"];

        var usedNames = [];
        for (var i = 0; i < names.length; i++) {
            if (this[functionArbitrators[i]]()) {
                usedNames.push(names[i]);
            }
        }
        var usedNamesString = usedNames.join(', ');
        this._status_el_nettype.innerHTML = "Net Type: " + usedNamesString;
    }

    PetriNetVisualizerWidget.prototype.updatePlaceDisplay = function (path) {
        var place = this.places[path];
        var guiObj = place['guiObj'];
        guiObj.attr({
            body: {
                fill: 'white'
            },
            label: {
                text: place['name'] + "-" + place["marking"].toString(),
                fill: 'black'
            }
        });
    }

    PetriNetVisualizerWidget.prototype.updateTransitionDisplay = function (path) {
        var transition = this.transitions[path];
        var guiObj = transition['guiObj'];
        var transition_enabled = this.isTransitionEnabled(path);
        var enabledColor = transition_enabled ? 'green' : 'red';
        guiObj.attr({
            body: {
                fill: enabledColor
            },
            label: {
                text: transition['name'],
                fill: 'black'
            }
        });
        return transition_enabled;
    }

    PetriNetVisualizerWidget.prototype.updateAllPlaceDisplays = function () {
        for (var path in this.places) {
            this.updatePlaceDisplay(path);
        }
    }

    PetriNetVisualizerWidget.prototype.updateAllTransitionDisplays = function () {
        var any_enabled = false;
        for (var path in this.transitions) {
            var transition_enabled = this.updateTransitionDisplay(path);
            any_enabled = any_enabled || transition_enabled;
        }
        var deadlock_result = (any_enabled ? "No deadlock!" : "We're in deadlock!");
        this._status_el_deadlock.innerHTML = "Dead lock state: " + deadlock_result;
    }

    PetriNetVisualizerWidget.prototype.linkSatisfiables = function () {
        var newUnsatisfiedLinks = [];
        for (var nodeInfo of this.unsatisfiedlinks) {
            var nodeType = nodeInfo['type'];
            var src = nodeInfo['src'];
            var dst = nodeInfo['dst'];
            if (nodeInfo['type'] == "ArcToTransition") {
                if ((src in this.places) && (dst in this.transitions)) {
                    this.places[src]['transitions'][dst] = true;
                    var rectSrc = this.places[src]['guiObj'];
                    var rectDst = this.transitions[dst]['guiObj'];
                    var link = new joint.shapes.standard.Link();
                    link.source(rectSrc);
                    link.target(rectDst);
                    link.addTo(this._graph);
                }
                else {
                    newUnsatisfiedLinks.push(nodeInfo);
                }
            }
            else if (nodeInfo['type'] == "ArcToPlace") {
                if ((src in this.transitions) && (dst in this.places)) {
                    var link = new joint.shapes.standard.Link();
                    this.transitions[src]['places'][dst] = true;
                    var rectSrc = this.transitions[src]['guiObj'];
                    var rectDst = this.places[dst]['guiObj'];
                    var link = new joint.shapes.standard.Link();
                    link.source(rectSrc);
                    link.target(rectDst);
                    link.addTo(this._graph);
                }
                else {
                    newUnsatisfiedLinks.push(nodeInfo);
                }
            }
        }
        this.unsatisfiedlinks = newUnsatisfiedLinks;
    }

    PetriNetVisualizerWidget.prototype.resetSimulation = function () {
        this._graph.clear();
        this.places = {};
        this.transitions = {};
        for (var nodeName in this.nodes) {
            this.addNode(this.nodes[nodeName]);
        }
    }

    PetriNetVisualizerWidget.prototype.removeNode = function (gmeId) {
        delete this.nodes[gmeId];
        this.resetSimulation();
    };

    PetriNetVisualizerWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this.resetSimulation();
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    PetriNetVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PetriNetVisualizerWidget.prototype.onBackgroundDblClick = function () {
        
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVisualizerWidget.prototype.destroy = function () {
    };

    PetriNetVisualizerWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVisualizerWidget has been activated');
    };

    PetriNetVisualizerWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVisualizerWidget has been deactivated');
    };

    return PetriNetVisualizerWidget;
});
